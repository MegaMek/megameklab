# Builds MegaMekLab for CI (and CD via artifacts)
#
# Jobs:
#    - ci_cd: Build MegaMekLab for CI/CD on the specified Operating Systems for the specified Java versions
#        - This job will use the MM source directly for the build.
name: MegaMekLab CI with Gradle

# This Action Definition should be triggered only on
# Pull Requests being added/updated against master.
on:
  pull_request:
    branches: [ master ]

# Setup the Build Scan "VCS" link for all gradle invocations
env:
  GRADLE_OPTS: "-Dscan.link.VCS=${{ github.event.pull_request.html_url }}"

jobs:
  # Perform CI (and CD as an artifact) of MegaMekLab any time a pull request is added or updated.
  ci_cd:
    runs-on: ${{ matrix.os }}

    # Run this job once for each combination in the matrix below.
    strategy:
      matrix:
        os: [ ubuntu-latest ] # For CI/CD running on *nix is sufficient
        java-distribution: [ temurin ]
        java-version: [ 11 ]
      fail-fast: false

    steps:
    # Checkout the Pull Request source and put it in: ./megameklab
    - uses: actions/checkout@v2
      with:
        path: megameklab

    # Setup composite build for MegaMekLab
    # See: https://github.com/MegaMek/megamek/wiki/Working-With-Gradle
    - name: Setup Composite Build for MegaMekLab
      run: |
        echo "includeBuild '../megamek'" >./megameklab/settings_local.gradle

    # Find the repo and branch to use for MM
    #
    # Output variables:
    #    - mmRepo: The MM repository to use.
    #    - mmBranch: The MM branch to use.
    - name: Find the Right MegaMek Branch
      id: find_mm
      # Override bash so that it doesn't fail fast (the default)
      # if we can't find the branch
      shell: bash {0}
      # This shell script searches the PR submitter's MM repo for
      # a branch that has the same name as the current PR branch.
      # If found it sets the `mmRepo` and `mmBranch` step output variables
      # to that branch.
      run: |
        git ls-remote --exit-code --heads ${{ github.event.pull_request.head.repo.owner.html_url }}/megamek.git ${{ github.event.pull_request.head.ref }}
        if [ "$?" == "0" ]
        then
          echo "${{ github.event.pull_request.head.repo.owner.html_url }}" | awk -F/ '{print "::set-output name=mmRepo::" $4 "/megamek"}'
          echo "::set-output name=mmBranch::${{ github.event.pull_request.head.ref }}"
        else
          echo "::set-output name=mmRepo::MegaMek/megamek"
          echo "::set-output name=mmBranch::master"
        fi
        exit 0

    # Checkout the latest MegaMek source and put it in: ./megamek
    - name: Checkout MegaMek
      uses: actions/checkout@v2
      with:
        repository: ${{ steps.find_mm.outputs.mmRepo }}
        ref:  ${{ steps.find_mm.outputs.mmBranch }}
        path: megamek

    # Setup the requested Java Distribution and Version from the matrix
    - name: Set up ${{ matrix.java-distribution }} JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v2
      with:
        distribution: ${{ matrix.java-distribution }}
        java-version: ${{ matrix.java-version }}

    # Make sure we can execute the Gradle wrapper        
    - name: Grant execute permission for gradlew (*nix or MacOS)
      working-directory: megameklab  
      run: chmod +x gradlew
      if: runner.os != 'Windows'

    # Build the MegaMekLab project
    #
    # Directory layout:
    #    /megameklab
    #        /gradlew
    #    /megamek
    #
    # Output Variables:
    #    - buildScanUri
    - name: Build with Gradle
      id: gradle_build
      working-directory: megameklab
      run: ./gradlew -I .github/build-scan-init.gradle build --stacktrace --scan

    # If the build step fails, try to upload any test logs in case it was a unit test failure.
    # The logs will be relative to the ./megamek directory.
    - name: Upload Test Logs on Failure
      uses: actions/upload-artifact@v2.2.4
      if: failure()
      with:
        name: cd-failure-logs
        path: megameklab/build/reports/

    # If we have a buildScanUri comment on the PR
    #
    # NB: This only works if you're on the main MegaMek\megameklab repo
    #     for now due to a GitHub Actions limitation.
# CAW: temporarily disabled due to https://github.com/thollander/actions-comment-pull-request/issues/17
#    - name: Comment on PR with Build Scan URI
#      uses: thollander/actions-comment-pull-request@master
#      if: always() && steps.gradle_build.outputs.buildScanUri != ''
#      with:
#        message: Build scan available at ${{ steps.gradle_build.outputs.buildScanUri }}
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Put the non-Windows Release in an artifact
    #
    # NB: Due to a GitHub Actions limitation we won't know what the filename is in order to display it somewhere.
    - name: Upload Nix/Mac Releases
      uses: actions/upload-artifact@v2.2.4
      if: always() && matrix.os == 'ubuntu-latest'
      with:
        name: release-nix-mac-${{ matrix.java-distribution }}-jdk${{ matrix.java-version }}
        path: megameklab/build/distributions/*.tar

    # Put the Windows Release in an artifact
    #
    # NB: Due to a GitHub Actions limitation we won't know what the filename is in order to display it somewhere.
    - name: Upload Windows Release
      uses: actions/upload-artifact@v2.2.4
      if: always() && matrix.os == 'windows-latest'
      with:
        name: release-win-${{ matrix.java-distribution }}-jdk${{ matrix.java-version }}
        path: megameklab/build/distributions/*.zip
