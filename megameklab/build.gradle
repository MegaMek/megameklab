import java.time.LocalDateTime

plugins {
    id 'application'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id 'jacoco'
    id 'java'
    id "io.sentry.jvm.gradle" version "4.10.0"
    id 'com.palantir.git-version' version '3.1.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

ext {
    mmlJvmOptions = ['-Xmx1024m']
    data = 'data'
    unitFiles = "${data}/mechfiles"
    docs = 'docs'
    lib = 'lib'
    log = 'logs'
    mmconf = 'mmconf'
    userdata = 'userdata'
    distributionDir = "${buildDir}/distributions"
    fileStagingDir = "${buildDir}/files"
    scriptsDir = "${projectDir}/scripts"
    scriptTemplate = "${scriptsDir}/startScriptTemplate.txt"

    // Allows setting a dependency on a different MM branch.
    mmBranch = 'master'
    mmBranchTag = mmBranch.equals('master') ? '' : '-' + mmBranch

    mmDir = "${rootDir}/../megamek"
}

dependencies {
    implementation "org.megamek:megamek${mmBranchTag}:${version}"

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.pdfbox:pdfbox:2.0.27'
    implementation ('org.apache.xmlgraphics:batik-bridge:1.14') {
        // We don't need the python and javascript engine taking up space
        exclude group: 'org.python', module: 'jython'
        exclude group: 'org.mozilla', module: 'rhino'
        exclude group: 'xml-apis'
    }
    implementation ('org.apache.xmlgraphics:batik-codec:1.14') {
        exclude group: 'xml-apis'
    }
    implementation ('org.apache.xmlgraphics:batik-dom:1.14') {
        exclude group: 'xml-apis'
    }
    implementation 'org.apache.xmlgraphics:batik-rasterizer:1.14'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.14'
    implementation ('org.apache.xmlgraphics:fop:2.7') {
        // We don't need this proprietary module
        exclude group: 'com.sun.media', module: 'jai-codec'
        exclude group: 'xml-apis'
    }
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    //Required for printing scaled vector graphics (SVG) - EclipseIDE Comipatability.
    runtimeOnly 'xml-apis:xml-apis-ext:1.3.04'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

application {
    mainClass = 'megameklab.MegaMekLab'
}

jar {
    archiveFileName = "MegaMekLab.jar"
    manifest {
        attributes "Main-Class" : application.mainClass
        attributes "Class-Path" : "${lib}/MegaMek.jar " + (project.sourceSets.main.runtimeClasspath.files
                .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }
                .collect { "${lib}/${it.name}" }.join(' '))
        attributes "Add-Opens" : 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date" : LocalDateTime.now()
    }
}

task generateDynamicFiles() {
    doLast {
        new File("${projectDir}/docs/mml-revision.txt").text = versionDetails().gitHashFull
        new File("${projectDir}/MegaMekLab.l4j.ini").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${project.ext.mmlJvmOptions.join('\n')}
"""
    }
}

task stageFiles(type: Copy) {
    description = 'Stages files that are to be copied into the distribution.'

    dependsOn gradle.includedBuild('megamek').task(':megamek:compileJava')
    dependsOn generateDynamicFiles

    from projectDir
    include "${mmconf}/**"
    include "${data}/**"
    include "${docs}/**"
    include 'license.txt'
    include 'SubmitBug.html'
    include "sentry.properties"
    include "*.ini"
    exclude "**/*.psd"

    into fileStagingDir

    doLast {
        mkdir "${fileStagingDir}/${log}"
    }
}

task createStartScripts (type: CreateStartScripts) {
    description = 'Create shell script for generic distribution.'
    applicationName = 'mml'
    mainClass = application.mainClass
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
    defaultJvmOpts = project.ext.mmlJvmOptions
    // The default template assumes the start script is in a subdirectory and always
    // sets APP_HOME to the parent directory of the one containing the script.
    // So we provide a modified template.
    unixStartScriptGenerator.template = resources.text.fromFile(scriptTemplate)
    doLast {
        // The start script assumes all the files on the classpath will be in the lib directory.
        unixScript.text = unixScript.text.replace('lib/MegaMekLab', 'MegaMekLab')
        windowsScript.text = windowsScript.text.replace('lib/MegaMekLab', 'MegaMekLab')
        // The Windows script just has a single line that needs to be changed to put the script in the root,
        // so we'll do a simple replace
        windowsScript.text = windowsScript.text.replace('set APP_HOME=%DIRNAME%..', '')
    }
}

distributions {
    main {
        distributionBaseName = 'MegaMekLab'
        contents {
            from ("${mmDir}/megamek/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }

            // MM Data
            from ("${mmDir}/megamek/data/fonts") {
                include 'btclassic'
                into "${data}/fonts"
            }
            from ("${mmDir}/megamek/data/forcegenerator") {
                include 'factions.xml'
                into "${data}/forcegenerator"
            }
            from ("${mmDir}/megamek/data/images/fluff") {
                into "${data}/images/fluff"
            }
            from ("${mmDir}/megamek/data/images/misc") {
                into "${data}/images/misc"
            }
            from ("${mmDir}/megamek/data/images/widgets") {
                into "${data}/images/widgets"
            }
            from ("${mmDir}/megamek/data/images") {
                include 'units'
                include 'universe'
                into "${data}/images"
            }
            from ("${mmDir}/megamek/data/mechfiles") {
                into "${unitFiles}"
            }
            from ("${mmDir}/megamek/data/universe") {
                into "${data}/universe"
            }
            from ("${mmDir}/megamek/data/fonts") {
                include 'btclassic'
                into "${data}/fonts"
            }

            from (fileStagingDir) {
                exclude 'history.txt'
            }
            from (createStartScripts) {
                include 'mml*'
                rename 'mml(.*)', 'mml-startup$1'
            }
            from ("${mmDir}/megamek/build/libs/MegaMek.jar") {
                into "${lib}"
            }
            from (jar)
            from (project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }) {
                into "${lib}"
            }

            from ("${buildDir}/launch4j") {
                include '*.exe'
            }
            from(jar) {
                into "${lib}"
            }
            duplicatesStrategy = "exclude"
        }
    }
}

launch4j {
    description = 'Create Windows executable for MegaMekLab'
    mainClassName = application.mainClass
    outfile = "MegaMekLab.exe"
    icon = "${projectDir}/data/images/misc/megameklab.ico"
    jarTask = project.tasks.jar
    internalName = 'MegaMekLab'
    downloadUrl = 'https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
    supportUrl = 'https://megamek.org'
    copyright = '2024 MegaMek Development Team.'
    trademarks = 'MechWarrior, BattleMech, `Mech and Aerotech - The The Topps Company, Inc. Catalyst Game Labs - InMediaRes Productions, LLC.'
    companyName = "MegaMek Development Team"
    jvmOptions = project.ext.mmlJvmOptions
    jreMinVersion = '17'
    dontWrapJar = true
    messagesJreVersionError = 'We require a Java Runtime of version 17 or higher installed. https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
    messagesJreNotFoundError = 'Go here for instructions on installing the correct version of Java: https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium'
}

tasks.register("packagePrepWork") {
    description = 'General Catch All for all distributions'
    dependsOn stageFiles
    dependsOn startScripts
    dependsOn createStartScripts
    dependsOn createAllExecutables
}

distZip {
    description = 'Creates zip Package'
    enabled = false
    dependsOn packagePrepWork
}

distTar {
    description = 'Creates a TGZ package'
    dependsOn packagePrepWork
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

// The distribution plugin adds the distro packages to the assemble task, which causes the build task
// to run all the packaging tasks.
task assemble(overwrite: true) {
    dependsOn jar
}

// Replace the assembleDist task created by the distributions plugin to create the packages we want to
task assembleDist(overwrite: true) {
    description = 'Build unix, Windows, and source packages'
    group = 'distribution'
    dependsOn test
    dependsOn distTar
}

test {
    useJUnitPlatform()
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

task processSystemTest(type: JavaExec, dependsOn: stageFiles) {
    description = 'Internal System Test. Dev use only.'
    group = 'other'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megameklab.printing.CGLMassPrinter'
}

tasks.register("cleanAll") {
    dependsOn gradle.includedBuild('megamek').task(':clean')
    dependsOn clean
}
