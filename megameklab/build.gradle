import java.time.LocalDateTime

plugins {
    id 'application'
    id 'com.palantir.git-version' version '3.2.0'
    id 'edu.sc.seis.launch4j' version '3.0.6'
    id "io.sentry.jvm.gradle" version "5.3.0"
    id 'jacoco'
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        java {
            srcDirs = ['unittests']
        }
        resources {
            srcDirs = ['testresources']
        }
    }
}

ext {
    mmlJvmOptions = ['-Xmx1024m']
    data = 'data'
    docs = 'docs'
    lib = 'lib'
    log = 'logs'
    mmconf = 'mmconf'
    fileStagingDir = "${layout.buildDirectory.get()}/files"

    mmDir = "${rootDir}/../megamek"
}

dependencies {
    implementation "org.megamek:megamek:${version}"

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'

    implementation 'org.apache.logging.log4j:log4j-core:2.24.3'

    implementation 'org.apache.pdfbox:pdfbox:2.0.33'

    implementation('org.apache.xmlgraphics:batik-bridge:1.18') {
        // We don't need the python and javascript engine taking up space
        exclude group: 'org.python', module: 'jython'
        exclude group: 'org.mozilla', module: 'rhino'
        exclude group: 'xml-apis'
    }

    implementation('org.apache.xmlgraphics:batik-codec:1.18') {
        exclude group: 'xml-apis'
    }

    implementation('org.apache.xmlgraphics:batik-dom:1.18') {
        exclude group: 'xml-apis'
    }

    implementation 'org.apache.xmlgraphics:batik-rasterizer:1.18'
    implementation 'org.apache.xmlgraphics:batik-svggen:1.18'

    implementation('org.apache.xmlgraphics:fop:2.10') {
        // We don't need this proprietary module
        exclude group: 'com.sun.media', module: 'jai-codec'
        exclude group: 'xml-apis'
    }

    implementation('org.apache.commons:commons-collections4:4.5.0-M3')

    testImplementation 'org.mockito:mockito-core:5.17.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'

    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'

    //Required for printing scaled vector graphics (SVG) - EclipseIDE Compatibility.
    runtimeOnly 'xml-apis:xml-apis-ext:1.3.04'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.12.1'
}

application {
    mainClass = 'megameklab.MegaMekLab'
}

jar {
    archiveFileName = "MegaMekLab.jar"
    manifest {
        attributes "Main-Class": application.mainClass
        attributes "Class-Path": "${lib}/MegaMek.jar " + (project.sourceSets.main.runtimeClasspath.files
                .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }
                .collect { "${lib}/${it.name}" }.join(' '))
        attributes "Add-Opens": 'java.base/java.util java.base/java.util.concurrent'
        attributes "Build-Date": LocalDateTime.now()
    }
}

tasks.register('generateDynamicFiles') {
    def jvmOptions = project.ext.mmlJvmOptions.join('\n')

    doLast {
        new File("${projectDir}/docs/mml-revision.txt").text = versionDetails().gitHashFull
        new File("${projectDir}/MegaMekLab.l4j.ini").text = """# Launch4j runtime config
# you can add arguments here that will be processed by the JVM at runtime
${jvmOptions}
"""
    }
}

tasks.register('stageFiles', Copy) {
    description = 'Stages files that are to be copied into the distribution.'

    dependsOn gradle.includedBuild('megamek').task(':megamek:compileJava')
    dependsOn generateDynamicFiles

    from projectDir
    include "${mmconf}/**"
    include "${data}/**"
    include "${docs}/**"
    include 'license.txt'
    include 'SubmitBug.html'
    include "sentry.properties"
    include "*.ini"
    exclude "**/*.psd"

    // User Config Files
    exclude "${mmconf}/clientsettings.xml"
    exclude "${mmconf}/gameoptions.xml"
    exclude "${mmconf}/megameklab.properties"
    exclude "${mmconf}/megameklab.properties.bak"
    exclude "${mmconf}/mhq.preferences"
    exclude "${mmconf}/mm.preferences"
    exclude "${mmconf}/mml.preferences"

    into fileStagingDir

    doLast {
        mkdir "${fileStagingDir}/${log}"
    }
}

tasks.register('createStartScripts', CreateStartScripts) {
    description = 'Create shell script for generic distribution.'
    applicationName = 'MegaMekLab'
    mainClass = application.mainClass
    outputDir = startScripts.outputDir
    classpath = jar.outputs.files + files(project.sourceSets.main.runtimeClasspath.files)
            .filter { it.name.endsWith(".jar") }
    defaultJvmOpts = project.ext.mmlJvmOptions
}

distributions {
    main {
        distributionBaseName = 'MegaMekLab'
        contents {
            from("${mmDir}/megamek/mmconf/log4j2.xml") {
                exclude 'log4j2.xml'
            }
            from(fileStagingDir) {
                exclude 'history.txt'
            }
            from("${mmDir}/megamek/build/libs/MegaMek.jar") {
                into "${lib}"
            }
            from("${projectDir}/scripts") {
                rename "shell.sh", "MegaMekLab.sh"
            }
            from(jar)
            from(project.sourceSets.main.runtimeClasspath.files
                    .findAll { it.name.endsWith(".jar") && !it.name.toLowerCase().startsWith("megamek") }) {
                into "${lib}"
            }

            from("${buildDir}/launch4j") {
                include '*.exe'
            }
            from(jar) {
                into "${lib}"
            }
            duplicatesStrategy = 'exclude'
        }
    }
}

launch4j {
    description = 'Create Windows executable for MegaMekLab'
    mainClassName = application.mainClass
    outfile = "MegaMekLab.exe"
    icon = "${projectDir}/data/images/misc/megameklab.ico"
    jarTask = project.tasks.jar
    internalName = 'MegaMekLab'
    downloadUrl = 'https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    supportUrl = 'https://megamek.org'
    copyright = '2025 MegaMek Development Team.'
    trademarks = 'MechWarrior, BattleMech, `Mech and AeroTech - The The Topps Company, Inc. Catalyst Game Labs - InMediaRes Productions, LLC.'
    companyName = "MegaMek Development Team"
    jvmOptions = project.ext.mmlJvmOptions
    jreMinVersion = '17'
    dontWrapJar = true
    messagesJreVersionError = 'We require a Java Runtime of version 17 or higher installed. https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
    messagesJreNotFoundError = 'Go here for instructions on installing the correct version of Java: https://github.com/MegaMek/megamek/wiki/Updating-to-Adoptium-(Eclipse-Temurin-Open-Source-Java)'
}

tasks.register("packagePrepWork") {
    description = 'General Catch All for all distributions'
    dependsOn stageFiles
    dependsOn startScripts
    dependsOn createStartScripts
    dependsOn createAllExecutables
}

distZip {
    description = 'Creates zip Package'
    enabled = false
    dependsOn packagePrepWork
}

distTar {
    description = 'Creates a TGZ package'
    dependsOn packagePrepWork
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

assemble {
    dependsOn jar
}

assembleDist {
    dependsOn distTar
}

test {
    useJUnitPlatform()
    // report is always generated after tests run
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.register('processSystemTest', JavaExec) {
    dependsOn stageFiles
    description = 'Internal System Test. Dev use only.'
    group = 'other'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'megameklab.printing.CGLMassPrinter'
}

tasks.register('cleanAll') {
    description = 'Cleans all related projects to ensure a proper build.'
    group = 'build'
    dependsOn gradle.includedBuild('megamek').task(':megamek:clean')
    dependsOn clean
}

tasks.register('testAll') {
    description = 'Cleans all related projects then runs all tests'
    group = 'verification'
    dependsOn cleanAll

    dependsOn gradle.includedBuild('megamek').task(':megamek:test')
    dependsOn test
}
